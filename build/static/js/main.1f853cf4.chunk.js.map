{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Date","getDate","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","result","searchTerm","onDismiss","bind","assertThisInitialized","onSearchChange","_this2","fetch","then","response","json","console","log","articles","length","i","objectID","setState","catch","id","updatedList","filter","item","event","target","value","_this$state","react_default","a","createElement","className","App_Search","onChange","App_Table","pattern","Component","Search","_ref","children","type","Table","_ref2","title","toLowerCase","includes","map","key","style","width","author","href","url","publishedAt","slice","App_Button","onClick","Button","_this$props","_this$props$className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f853cf4.chunk.js","sourcesContent":["/* eslint-disable func-names */\n/* eslint-disable react/jsx-one-expression-per-line */\n/* eslint-disable no-console */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable no-template-curly-in-string */\n/* eslint-disable no-undef */\n/* eslint-disable no-return-assign */\n/* eslint-disable no-param-reassign */\n/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable react/destructuring-assignment */\nimport React, { Component } from 'react';\nimport './App.css';\n\nconst helloWorld = 'News Aggregation';\nconst categories = 'Technology / Econ';\nconst date = new Date();\n// eslint-disable-next-line no-unused-vars\nconst day = date.getDate();\nconst api =\n  'https://newsapi.org/v2/everything?q=technology or Econ&from=2019-04-14${day}&sortBy=publishedAt&apiKey=5bf49b2702f54576bab85424a9278e43';\n\nfunction isSearched(searchTerm) {\n  return function(item) {\n    return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n  };\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: [],\n      searchTerm: ''\n    };\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  componentDidMount() {\n    // fetch data and update state\n    fetch(api)\n      .then(response => (response = response.json()))\n      .then(response => {\n        console.log(response.articles.length);\n        // eslint-disable-next-line no-plusplus\n        for (let i = 0; i < response.articles.length; i++) {\n          response.articles[i].objectID = i;\n        }\n        this.setState({ result: response.articles });\n      })\n      .catch();\n  }\n\n  onDismiss(id) {\n    const updatedList = this.state.result.filter(item => item.objectID !== id);\n    this.setState({ result: updatedList });\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  render() {\n    const { searchTerm, result } = this.state;\n\n    console.log(result);\n    if (!result) {\n      return 1;\n    }\n    return (\n      // eslint-disable-next-line react/jsx-filename-extension\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <div className=\"App\">\n            <h2> {helloWorld} </h2>\n            <h3> {categories} </h3>\n            <Search value={searchTerm} onChange={this.onSearchChange}>\n              Search\n            </Search>\n          </div>\n          <Table result={result} pattern={searchTerm} onDismiss={this.onDismiss} />\n        </div>\n        <p>\n          {' '}\n          <i> *Built on: React JavaScript / News API </i>\n        </p>\n      </div>\n    );\n  }\n}\n\n// eslint-disable-next-line react/prop-types\nconst Search = ({ value, onChange, children }) => {\n  return (\n    <form>\n      {children} <input type=\"text\" value={value} onChange={onChange} />\n    </form>\n  );\n};\n\n// eslint-disable-next-line react/prop-types\nconst Table = ({ result, pattern, onDismiss }) => (\n  <div className=\"table\">\n    {result.filter(isSearched(pattern)).map(item => (\n      <div key={item.objectID} className=\"table-row\">\n        <span style={{ width: '25%' }}>{item.title}</span>\n        <span style={{ width: '20%' }}>{item.author}</span>\n        <span style={{ width: '5%' }} />\n        <span style={{ width: '20%' }}>\n          <a href={item.url}> {item.url} </a>\n        </span>\n        <span style={{ width: '15%' }}>{item.publishedAt.slice(5, 10)}</span>\n        <span style={{ width: '10%' }}>\n          <Button onClick={() => onDismiss(item.objectID)} className=\"button-inline\">\n            Dismiss\n          </Button>\n        </span>\n      </div>\n    ))}\n  </div>\n);\n\n// eslint-disable-next-line react/prefer-stateless-function\n// eslint-disable-next-line react/no-multi-comp\nclass Button extends Component {\n  render() {\n    // eslint-disable-next-line react/prop-types\n    const { onClick, className = '', children } = this.props;\n\n    return (\n      <button onClick={onClick} className={className} type=\"button\">\n        {children}\n      </button>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// makes it so that changes to code doesn't refresh the app page\nif (module.hot) {\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}